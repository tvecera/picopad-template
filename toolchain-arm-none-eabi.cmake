# Set the target architecture and MCU
set(TOOLCHAIN arm-none-eabi)
set(TOOLCHAIN_BIN_DIR ${TOOLCHAIN_PREFIX}/bin)
set(TOOLCHAIN_INC_DIR ${TOOLCHAIN_PREFIX}/${TOOLCHAIN}/include)
set(TOOLCHAIN_LIB_DIR ${TOOLCHAIN_PREFIX}/${TOOLCHAIN}/lib)
if (WIN32)
    set(EXE_FILE_EXT ".exe")
    set(TOOLS_SUFFIX "_win")
elseif (APPLE)
    set(EXE_FILE_EXT "")
    set(TOOLS_SUFFIX "_macos")
else ()
    set(EXE_FILE_EXT "")
    set(TOOLS_SUFFIX "_linux")
endif ()

set(CMAKE_C_COMPILER ${TOOLCHAIN_BIN_DIR}/${TOOLCHAIN}-gcc${EXE_FILE_EXT} CACHE INTERNAL "C Compiler")
set(CMAKE_CXX_COMPILER ${TOOLCHAIN_BIN_DIR}/${TOOLCHAIN}-g++${EXE_FILE_EXT} CACHE INTERNAL "C++ Compiler")
set(CMAKE_ASM_COMPILER ${TOOLCHAIN_BIN_DIR}/${TOOLCHAIN}-gcc${EXE_FILE_EXT} CACHE INTERNAL "ASM Compiler")
set(CMAKE_OBJCOPY ${TOOLCHAIN_BIN_DIR}/${TOOLCHAIN}-objcopy${EXE_FILE_EXT})
set(CMAKE_OBJDUMP ${TOOLCHAIN_BIN_DIR}/${TOOLCHAIN}-objdump${EXE_FILE_EXT})
set(CMAKE_SIZE ${TOOLCHAIN_BIN_DIR}/${TOOLCHAIN}-size${EXE_FILE_EXT})
set(CMAKE_FIND_ROOT_PATH ${TOOLCHAIN_PREFIX}/${${TOOLCHAIN}} ${CMAKE_PREFIX_PATH})
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)

set(MARCH "armv6-m")
set(MCU "cortex-m0plus")
set(ARCHCFG "-march=${MARCH} -mcpu=${MCU} -mthumb ")

set(CMAKE_ASM_FLAGS "${ARCHCFG} -x assembler-with-cpp ")
set(CMAKE_C_FLAGS "${ARCHCFG} -DMBED_TRAP_ERRORS_ENABLED=1 -Os -ffunction-sections -fdata-sections -funsigned-char ")
set(CMAKE_CXX_FLAGS "${CMAKE_C_FLAGS} -fno-exceptions -fno-unwind-tables -fno-rtti -fno-use-cxa-atexit -std=gnu++17")
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=gnu11 ")
set(CMAKE_EXE_LINKER_FLAGS "-Wl,--gc-sections --specs=nano.specs --specs=nosys.specs -mthumb -mabi=aapcs -Wl,--build-id=none")

# Set the C++ standard to be used
set(CMAKE_CXX_STANDARD 17)